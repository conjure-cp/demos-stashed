



function display(message, escape) {
    pre.innerHTML = ""
    if (escape) {
        var text = document.createTextNode(message);
        pre.appendChild(text);
    } else {
        pre.innerHTML = message
    }
}

function displayError(message, escape) {
    pre.innerHTML = ""
    if (escape) {
        var text = document.createTextNode("Error: " + message);
        pre.appendChild(text);
    } else {
        pre.innerHTML = "Error: " + message
    }
    document.getElementById("run_button").innerHTML = "RUN";
}

function handleFileSelect(event) {
    try {
        var file = event.target.files[0];
        document.getElementById("input_file").value = "";
        var reader = new FileReader();
        reader.onload = processFile;
        reader.readAsText(file);
    } catch(ex) {
        alert("Unexpected error: " + ex + "\n\nPress okay to restart");
        location.reload()
    }
}

function processFile(file) {
    if (document.getElementById("nav-spec-tab").getAttribute("aria-selected") === "true") {
        document.getElementById("spec_text").value = file.target.result
    } else {
        document.getElementById("param_text").value = file.target.result
    }
}

function runningStopped() {
    return window.runButton.innerHTML === "RUN";
}

COMPLETED_ICON = '<i class="far fa-check-square"></i>';
LOADING_ICON = '<div class="spinner-border" role="status"><span class="sr-only">Running...</span></div>';
NOT_STARTED_ICON = '<i class="far fa-square"></i>';
NUMBER_STEPS = 5
/* remove all checkmarks and other progress indicators  from progress steps and hide the steps.  Set run button back to "RUN" */  
function resetProgressSteps() {
    runButton.innerHTML = "RUN";
    for (var i = 0; i < progressStepIndicators.length; i++) {
        progressStepIndicators[i].innerHTML = NOT_STARTED_ICON;
    }
    progressStepsDiv.style.display = "none";
}

function showProgressSteps() {
    progressStepsDiv.style.display = "block";
}

function 

displayStepBegin(stepIndex) {
    for (var i = 0; i < stepIndex; i++) {
        progressStepIndicators[i].innerHTML = COMPLETED_ICON;
    }
    progressStepIndicators[stepIndex].innerHTML = LOADING_ICON;
}

function checkForPermission() {
    if (!window.permissionGranted) {
        window.permissionGranted = confirm("Some models may be logged for debugging purposes.  Press okay to proceed.");
    }
    return window.permissionGranted;
}
function runButtonPressed() {
    if (window.runButton.innerHTML === "RUN") {
        if (!checkForPermission()) {
            return
        }
        runButton.innerHTML = "STOP";
        showProgressSteps()
        display("",true);
        displayStepBegin(0);
        window.solutionFound = false;
        window.lastStageReached = -1
        submitProblem()
    } else {
        resetProgressSteps();
        var xhr = new XMLHttpRequest();
        xhr.open("POST","stopSolve",true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        xhr.onload = function() {
        };
                var data = {"requestId":window.requestId}
                xhr.send(JSON.stringify(data));
                display("Cancelled");
    }
}




/* submit essence spec and param to server*/
function submitProblem() {
    data = {}
    data["spec"] = document.getElementById("spec_text").value
    data["param"] = document.getElementById("param_text").value
    var xhr = new XMLHttpRequest();
    xhr.open("POST","submitNewProblem",true);
    xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
    xhr.onload = function() {
        handleInitialServerResponse(xhr)
            }
            xhr.send(JSON.stringify(data));
}

function getJsonResponse(xhr) {
    return JSON.parse(xhr.responseText)
}

function handleInitialServerResponse(xhr) {
    if (runningStopped()) {
        return;
    }
    if (xhr.status === 200) {
        json = getJsonResponse(xhr);
        window.requestId = json["requestId"]
        getStatusMessages();
    } else {
        displayError(xhr.responseText,false);  //usually an error response here is generated by nginx or something like that so we don't escape the HTML
        resetProgressSteps();
    }
}

function getStatusMessages() {
    var xhr = new XMLHttpRequest();
    xhr.open("POST","getStatusMessages",true);
    xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
    xhr.onload = function() {
        json = getJsonResponse(xhr);
        var expectingMoreMessages = handleMessages(json)
        if (expectingMoreMessages && !runningStopped()) {
            setTimeout(function () { getStatusMessages(); }, 0);
        } else  {
                resetProgressSteps();
            }

            }
            var data = {"requestId":requestId}
            xhr.send(JSON.stringify(data));
}

function handleMessages(messages) {
    for (var i = 0; i < messages.length; i++) {
        var message = messages[i];
        if (message.hasOwnProperty("exit")) {
            if (!window.solutionFound) {
                display("No Solution Found", true);
            }
            return false; //no more messages expected
        } else if (message.hasOwnProperty("error")) {
            displayError(message["error"],true);
            resetProgressSteps();
            return false;
        } else if (message.hasOwnProperty("solution")) {
            window.solutionFound = true;
            loadAndDisplaySolution();
            //don't return false, get other messages
        } else if (message.hasOwnProperty("stage")) {
            displayStepBegin(message["stage"])
            window.lastStageReached = message["stage"];
            //don't return, move to next message
        } else {
            displayError("Unrecognised server response: " + JSON.stringify(message),true);
            return false;
        }
    }
    return true;
}

function loadAndDisplaySolution() {
    var xhr = new XMLHttpRequest();
    xhr.open("POST","getSolution",true);
    xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
    xhr.onload = function() {
        json = getJsonResponse(xhr);
        display(json["solution"],true);
    };
            var data = {"requestId":window.requestId}
            xhr.send(JSON.stringify(data));
}

window.onload = function() {
    document.getElementById("input_file").addEventListener('change',
        handleFileSelect, false);
    window.pre = document.getElementById("console_output");
    window.runButton = document.getElementById("run_button");
    window.progressStepsDiv = document.getElementById("progress_steps");
    window.progressStepIndicators = Array()
    for (var i = 0; i < NUMBER_STEPS; i++) {
        progressStepIndicators[i] = document.getElementById("progress_step_" + i);
    }
    window.permissionGranted = false
    resetProgressSteps()
    
}